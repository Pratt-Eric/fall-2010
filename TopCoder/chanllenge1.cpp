
#include <cstdio> #include <cstdlib> #include <cmath> #include <cstring> #include <iostream> #include <map> #include <set> #include <utility> #include <string> #include <vector> #include <algorithm> #include <functional> #include <sstream> #include <complex> #include <stack> #include <queue> #include <numeric> #include <bitset> #include <cctype>  using namespace std; typedef long long ll;  #define REP(i,a,b) for((i)=(a);(i)<(b);(i)++) #define rep(i,b) REP(i,0,b) #define FOR(i,c) for(__typeof((c).begin())i=(c).begin();i!=(c).end();++i) #define ALL(c) (c).begin(), (c).end()  typedef pair<int,int> P;  class PalindromeGame { public:   int getMaximum(vector <string> vstr, vector <int> pnt) {     int i, j, k;          int n =  vstr.size();          vector<string> rvstr = vstr;          rep(i,n) reverse(ALL(rvstr[i]));          int used[n]; rep(i,n) used[i] = 0;         int ans = 0;     rep(i,n) {             vector<P> vp;       vector<P> vp2;       vp2.push_back(P(pnt[i],i));       REP(j,i+1,n) {         if( used[j] ) continue;         if( vstr[i] == rvstr[j] ) vp.push_back(P(pnt[j],j));       }       REP(j,i+1,n) {         if( used[j] ) continue;         if( vstr[i] == vstr[j] )  vp2.push_back(P(pnt[j],j));       }       if( vp.size() and vp2.size() ) {         sort(ALL(vp),greater<P>());         sort(ALL(vp2),greater<P>());         for( j=0 ; j<min(vp.size(),vp2.size()) ; j++ ){           ans += vp[j].first + vp2[j].first;           used[vp[j].second] = used[vp2[j].second] = 1;                   }       }     }          vector<int> v;         rep(i,n) {       if( vstr[i]==rvstr[i] and used[i]==0 ) v.push_back(pnt[i]);     }     if ( v.size() ) {       sort(ALL(v),greater<int>());       ans += v[0];     }                return ans;    }      };
