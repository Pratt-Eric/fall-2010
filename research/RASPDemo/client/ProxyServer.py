import numpy as np
import sys, os
import ConnectionHandler as Handler
import ProxyManagers as Manager
from socket import *
from threading import *
import thread

class ProxyServer:
    ''' The proxy server. 
    Functionalities: 
    1, Generate random transformation matrix. 
    2, Generate random perturbation variable. 
    ''' 
    def __init__(self):
        ''' Initialize object. ''' 
        self.DATA_SERVER_PORT = 33333
        self.data_server_connector = \
            Handler.ConnectionHandler('localhost', 33333) 
        self._socket = self.data_server_connector.makeConnection()
        self.user_manager = Manager.ProxyUserManager()
        self.data_manager = Manager.ProxyDataManager() 

    def parameter_gen(self, k):
        ''' Parameter generator
        n is the dimension of the matrix A; 
        returns: 
        A - the transformation matrix; 
        v - A random variable for data perturbation; ''' 

        k = k + 2
        finva = open("inva.txt", "w")
        A =np.random.uniform(low=0, high=10, size=(k, k))
        invA = np.asarray(np.linalg.inv(np.mat(A)))
        #print np.mat(A) * np.matrix(invA)
        v = np.random.rand()
        while not(v > 0.02 and v <= 1): 
            v = np.random.rand()

        print k, k
        finva.write(str(k)+" "+str(k)+"\n")
        for i in range(0, k):
            for j in range(0, k): 
                print A[i][j],
                #print invA[i][j]
                finva.write(str(invA[i][j])+" ")
            print 
            finva.write("\n")
        print v
        finva.close()

    def transform_data(self, data):
        ''' Transform the data to a random space with the parameter 
        generated by the parameter_gen() function. ''' 
        f = open("param.txt")
        totalTime = 0.0
        k = int(f.readline().split(" ")[0])
        A = [] 
        for i in range(k):
            #print f.readline().strip().split()
            A.append([float(j) for j in f.readline().strip().split()])
        A = matrix(A).T
        v = float(f.readline())
        f.close()
        fin = open(sys.argv[1], 'r')
        flog = open("error.log.txt", "a")
        # Here comes the transformation; 
        m = []
        for line in fin: 
            m.append([float(i) for i in line.strip().split(" ")[3:]])
            x0 = []             # The original x axis;
            y0 = []             # The original y axis; 
            for i in range(len(m[0])):
                if i % 2 == 0:
                    x0.append(m[0][i])
                else:
                    y0.append(m[0][i])
            # Add additional dimension and noise perturbation variable; 
            x0.append(1)
            x0.append(v)
            y0.append(1)
            y0.append(v)
            try:
                time_t = time.clock()
                x1 = np.dot(A, x0) # The transformed x axis; 
                y1 = np.dot(A, y0) # The transformed y axis; 
            except(ValueError):
                flog.write("transd.py: Error happened while transforming axis \n")
                return 
            # Combine the transformed axis to an array;
            line = line.strip().split()
            print line[0], line[1], int(line[2]) + 2,
            for i in range(len(x1)):
                print x1[i], y1[i],
            print
            m = []
        fin.close()
        flog.close()

    def transform_query(self, query):
        ''' Transform query and generate Minimum Bounding Region and 
        the filtering condition. ''' 

    def outsourceData(self, data):
        ''' Upload data to the third party server. 
        Data should be transformed using the random key and v. 
        Then it should be uploaded to the data server on the cloud. ''' 
        self.data_server_connector.testConnection(self._socket)
        self.data_server_connector.sendData(data, self._socket)
        print self.data_server_connector.getResults(self._socket)

    def doQuerytoServer(self, query):
        ''' Do range query to the data server on the cloud. 
        As a two step querying will be performed on the data server
        side, the proxy server needs to sent the MBR and the
        transformed query as parameters to the data server. '''
        self.data_server_connector.testConnection(self._socket)
        self.data_server_connector.sendData(query, self._socket)
        print self.data_server_connector.getResults(self._socket)

    def userRegistration(self, username, passwd):
        ''' handle user registration request. '''
        return self.user_manager.userRegistration(username, passwd)

    def userLogin(self, username, passwd):
        ''' Handle user login request. '''
        return self.user_manager.userLogin(username, passwd)

    def testDataServerConnection(self): 
        ''' Test if the server is available for operation. ''' 
        return self.data_server_connector.testConnection()
    
    def requestHandler(self, clientsock, addr):
        ''' Handles connection requests from data user. '''
        BUFSIZ = 4096
        while True:
            data = clientsock.recv(BUFSIZ)
            if data.find('REG') != -1:
                dat = data.split(' ')
                response = self.userRegistration(dat[1], dat[2])
                clientsock.send(response)
            elif data.find('LOGIN') != -1:
                dat = data.split(' ')
                response = self.userLogin(dat[1], dat[2])
                clientsock.send(response)
            elif data == 'BYE': 
                clientsock.send('BYE')
                clientsock.close()
            elif data == 'TEST':
                clientsock.send('OK!')
            elif data.find('STORES') != -1:
                print data
                stores = self.data_manager.listDataStores(data.split(' ')[1])
                clientsock.send(stores)
                break
            else:
                requests = data.strip().split('|')
                for request in requests:
                    print request
                    if request.find('UPLOAD'):
                        self.outsourceData(request)
                    if request.find('QUERY'):
                        self.doQuerytoServer(request)
                break
            data = ''
            continue

if __name__ == '__main__':
    PROXY_SERVER_HOST = 'localhost'
    PROXY_SERVER_PORT = 22222
    BUFSIZ = 1024
    ADDR = (PROXY_SERVER_HOST, PROXY_SERVER_PORT)
    proxy_server = socket(AF_INET, SOCK_STREAM)
    proxy_server.bind(ADDR)
    proxy_server.listen(10)

    while True:
        print 'waiting for connection from user ...... '
        clientsock, addr = proxy_server.accept()
        print 'connected from:', addr
        handler = ProxyServer()
        thread.start_new_thread(handler.requestHandler, \
                                    (clientsock, addr))

        while True:
            if handler.testDataServerConnection(): 
                print 'Data server is alive ... '
                break
