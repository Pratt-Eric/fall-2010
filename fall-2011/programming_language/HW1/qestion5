#lang racket
; Exercise 5. 
; car&cdr : s x slist x err -> s-exp | sym. 
; produce a procedure that takes a list with same
; structure as the slist and returns the value in 
; the same position as teh leftmost occurence of
; s in slist. If it doesn't occur in the slist, 
; then errvalue is returned. 
(define errmsg 'fail)

; procedure to generate car and cdr list.
(define car&cdr1
  (lambda (s slist err)
    (if (null? slist) 
        (list err)
        (if (symbol? (car slist)) 
            (if (eqv? s (car slist))
                '(car)
                (append
                 '(cdr)
                  (car&cdr1 s (cdr slist) err)))
            (or 
             (append 
              '(car)
              (car&cdr1 s (car slist) err))
             (append
              '(cdr)
              (car&cdr1 s (cdr slist) err)))))))

(define contains-error
  (lambda (slist)
    (if (null? slist)
        #f
        (if (symbol? (car slist))
            (if (eqv? (car slist) errmsg)
                #t
                (contains-error (cdr slist)))
            (or
             (contains-error (car slist))
             (contains-error (cdr slist)))))))
    
(define car&cdr2
  (lambda (slist)
    (if (contains-error slist)
        errmsg
        (if (null? (cdr slist))
            (car slist)
            (if (symbol? slist)
                slist ; only on symbol. 
                (append
                 '(compose)
                 (list (car slist))
                 ;(list (cadr slist))
                 (list (car&cdr2 (cdr slist)))))))))

(define car&cdr
  (lambda (s slist err)
    (car&cdr2 (reverse (car&cdr1 s slist err)))))
          
; test for question 5.
(display "\nQuestion 5 --->>>>\n")
; test of the compose function. 
;(car&cdr (reverse (car&cdr1 'a '(b c) 'fail)))
;(car&cdr (reverse (car&cdr1 'c '(a b c) 'fail)))
;(car&cdr (reverse (car&cdr1 'dog '(cat lion (fish dog ()) pig) 'fail)))
(car&cdr 'dog '(cat lion (fish dog ()) pig) 'fail)